openapi: 3.0.1
info:
  title: Crestal Dashboard API - OpenAPI 3.0 Specification
  description: |
    The Crestal Dashboard API provides developers with access to backend services that power the Crestal platform, offering features for user authentication, project management, data analytics, and interaction tracking. This documentation outlines the available endpoints, request/response structures, and required authentication mechanisms.
  termsOfService: http://swagger.io/terms/
  contact:
    name: Crestal API Support
    url: https://www.crestal.dev/support
    email: support@crestal.dev
  license:
    name: Apache 2.0 License
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: "1.0.0"

servers:
  - url: https://api.testnet.crestal.xyz/v1
    description: Testnet Environment - Use this server for testing purposes with simulated data.
  - url: https://api.crestal.dev/v1
    description: Production Environment - Use this server for real-world data and operations.
  - url: http://127.0.0.1:80/v1
    description: Local Environment - Local server for development and debugging.

paths:
  /health_check:
    get:
      summary: Health Check
      description: Performs a health check on the server to determine its operational status. Use this endpoint to confirm that the service is online and functioning correctly.
      responses:
        "200":
          description: The server is healthy and operational.
        "500":
          description: The server encountered an internal error or is unavailable.
  
  /nonce:
    get:
      summary: Retrieve Nonce for Authentication
      description: Generates and returns a unique nonce value to be used for authentication. The nonce is typically used as part of a signature-based authentication flow.
      operationId: getNonce
      parameters:
        - name: user_address
          in: query
          description: The wallet address of the user requesting the nonce.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successfully generated the nonce.
          content:
            application/json:
              schema:
                type: object
                properties:
                  nonce:
                    type: string
                    example: "100000031"
                    description: A unique numeric string with at least 9 digits.
                  user_address:
                    type: string
                    example: "0x2975b28D83aBE09623e4ceb9522070B8bC10468a"
                    description: The corresponding wallet address used for nonce generation.
        "400":
          description: Bad Request - The `user_address` parameter is missing or malformed.
        "500":
          description: Internal Server Error - An unexpected error occurred on the server.
  
  /login:
    post:
      summary: User Login
      description: Authenticates the user using their wallet address and a signed message. If successful, a session cookie is returned in the response headers, allowing the user to maintain a logged-in state.
      operationId: login
      requestBody:
        description: JSON payload containing the user's wallet address, signature, and a structured message.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        "200":
          description: Successfully authenticated. Session cookie is set in the response headers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        "400":
          description: Bad Request - The request body is missing required fields or contains invalid data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid signature."
                    description: A description of the error encountered.
        "500":
          description: Internal Server Error - An unexpected error occurred during the authentication process.

  /token:
    get:
      security:
        - bearerAuth: []
      summary: Refresh User Token
      description: Generates a new access token using the provided refresh token. The new token can be used for subsequent authenticated requests.
      operationId: refreshToken
      parameters:
        - name: user_address
          in: query
          description: The wallet address of the user requesting a new token.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successfully generated a new access token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        "400":
          description: Bad Request - The `user_address` parameter is missing or malformed.
        "401":
          description: Unauthorized - The provided refresh token is invalid or has expired.
        "500":
          description: Internal Server Error - An unexpected error occurred on the server.
  /report:
    post:
      security:
        - bearerAuth: []
        - ApiKeyAuth: []
      summary: Submit User Interaction Report
      description: Records a user interaction report on the dashboard, tracking specific actions taken by the user.
      operationId: submitUserInteractionReport
      parameters:
        - name: user_address
          in: query
          description: The wallet address of the user in hexadecimal format.
          required: true
          schema:
            type: string
            minLength: 3
        - name: type
          in: query
          description: The type of user interaction being reported.
          required: true
          schema:
            type: string
            enum:
              - interact_with_dashboard
              - use_deployed_blueprint_proposal
      requestBody:
        description: Additional data related to the user interaction (optional).
        content:
          application/json:
            schema:
              type: object
      responses:
        "200":
          description: The interaction report was successfully recorded.
        "400":
          description: Bad Request - The provided parameters are missing or invalid.
        "500":
          description: Internal Server Error - An unexpected issue occurred while recording the report.

  /users/{user_address}:
    get:
      security:
        - bearerAuth: []
      summary: Retrieve User Information
      description: Fetch detailed information about a user based on their wallet address.
      operationId: getUserInfo
      parameters:
        - in: path
          name: user_address
          description: The wallet address of the user in hexadecimal format.
          required: true
          schema:
            type: string
            minLength: 3
      responses:
        "200":
          description: User details successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Bad Request - The provided user address is invalid or malformed.
        "404":
          description: Not Found - The user address does not exist in the system.
        "500":
          description: Internal Server Error - An unexpected error occurred on the server.

  /scores:
    get:
      security:
        - bearerAuth: []
      summary: Retrieve Top User Scores
      description: Fetch a list of top users ranked by their scores. The `top_k` parameter determines the number of top scores to retrieve (default is 10).
      operationId: getTopUserScores
      parameters:
        - name: top_k
          in: query
          description: The number of top users to retrieve (default is 10).
          required: false
          schema:
            type: integer
            minimum: 1
            example: 10
      responses:
        "200":
          description: A list of top user addresses and their respective scores.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scores'
        "400":
          description: Bad Request - The provided `top_k` parameter is missing or invalid.
        "500":
          description: Internal Server Error - An unexpected error occurred on the server.

 /api_key:
    get:
      security:
        - ApiKeyAuth: []
      summary: Retrieve API Key
      description: Returns the API key for the given user address, allowing authenticated access to restricted endpoints.
      operationId: getApiKey
      parameters:
        - name: user_address
          in: query
          description: The wallet address of the user in hexadecimal format.
          required: true
          schema:
            type: string
            minLength: 3
      responses:
        "200":
          description: The API key was successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIKey'
        "400":
          description: Bad Request - The provided `user_address` parameter is missing or invalid.
        "404":
          description: Not Found - No API key is associated with the specified user address.
        "500":
          description: Internal Server Error - An unexpected error occurred while retrieving the API key.

    post:
      security:
        - ApiKeyAuth: []
      summary: Create New API Key
      description: Generates a new API key for the specified user address, enabling secure access to API endpoints.
      operationId: createApiKey
      requestBody:
        description: The user address in the request payload.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        "200":
          description: A new API key has been successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIKey'
        "400":
          description: Bad Request - The request body is missing required fields or contains invalid data.
        "500":
          description: Internal Server Error - An unexpected error occurred during API key creation.
  /projects:
    get:
      security:
        - bearerAuth: []
      summary: Retrieve User Projects
      description: Returns a list of projects associated with the specified user address. Each project includes detailed information about its status, deployment, and proposal.
      operationId: getUserProjects
      parameters:
        - name: user_address
          in: query
          description: The wallet address of the user in hexadecimal format.
          required: true
          schema:
            type: string
            minLength: 3
        - name: proposal_id
          in: query
          description: ID of the proposal associated with the project.
          required: false
          schema:
            type: number
        - name: deployment_id
          in: query
          description: ID of the deployment associated with the project.
          required: false
          schema:
            type: number
      responses:
        "200":
          description: A list of full project details, including status, associated proposals, and deployment information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Projects'
        "400":
          description: Bad Request - One or more of the query parameters are missing or invalid.
        "404":
          description: Not Found - No projects were found for the specified parameters.
        "500":
          description: Internal Server Error - An unexpected error occurred while retrieving the project details.

    post:
      security:
        - bearerAuth: []
      summary: Create a New Project
      description: Creates a new project for the user. This endpoint is typically used by the frontend to record a user's activity when creating a new project.
      operationId: createProject
      requestBody:
        description: JSON payload containing the project details, including the user's address and project configurations.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectUpdate'
        required: true
      responses:
        "200":
          description: The project has been successfully created, returning full project information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResource'
        "400":
          description: Bad Request - The request body is missing required fields or contains invalid data.
        "500":
          description: Internal Server Error - An unexpected error occurred while creating the project.

  /projects/{project_id}/stop:
    post:
      security:
        - bearerAuth: []
      summary: Stop a Project
      description: Updates the status of a specified project to "terminated". This action is irreversible and indicates that the project has been officially stopped.
      operationId: stopProject
      parameters:
        - in: path
          name: project_id
          description: The unique identifier of the project to be stopped.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The project status has been updated to "terminated".
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResource'
        "400":
          description: Bad Request - The provided project ID is missing or invalid.
        "404":
          description: Not Found - The specified project does not exist.
        "500":
          description: Internal Server Error - An unexpected error occurred while updating the project status.

  /projects/{project_id}/cancelled:
    post:
      security:
        - bearerAuth: []
      summary: Cancel a Project
      description: Updates the status of a specified project to "cancelled". This action indicates that the project was cancelled before deployment.
      operationId: cancelProject
      parameters:
        - in: path
          name: project_id
          description: The unique identifier of the project to be cancelled.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The project status has been updated to "cancelled".
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResource'
        "400":
          description: Bad Request - The provided project ID is missing or invalid.
        "404":
          description: Not Found - The specified project does not exist.
        "500":
          description: Internal Server Error - An unexpected error occurred while updating the project status.

  /projects/{project_id}:
    get:
      security:
        - bearerAuth: []
      summary: Retrieve Project Details
      description: Fetches detailed information about a specific project using its unique project ID. The response includes project configuration, status, associated proposals, and deployment data.
      operationId: getProjectById
      parameters:
        - in: path
          name: project_id
          description: The unique identifier of the project to retrieve.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Detailed project information retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResource'
        "400":
          description: Bad Request - The provided project ID is missing or invalid.
        "404":
          description: Not Found - No project was found with the specified ID.
        "500":
          description: Internal Server Error - An unexpected error occurred while retrieving the project details.

    patch:
      security:
        - bearerAuth: []
      summary: Update Project Information
      description: Partially updates the information for a specific project. This endpoint is typically used by the frontend to record minor changes to the project, such as status updates or additional metadata.
      operationId: updateProjectById
      parameters:
        - in: path
          name: project_id
          description: The unique identifier of the project to update.
          required: true
          schema:
            type: string
      requestBody:
        description: JSON payload containing the fields to update for the project.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectUpdate'
        required: true
      responses:
        "200":
          description: The project has been successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResource'
        "400":
          description: Bad Request - The request body is missing required fields or contains invalid data.
        "404":
          description: Not Found - No project was found with the specified ID.
        "500":
          description: Internal Server Error - An unexpected error occurred while updating the project details.
  /deployments:
    get:
      security:
        - bearerAuth: []
      summary: Retrieve Deployment Information
      description: Retrieves deployment information based on the specified user address, proposal ID, or proposal hash. This endpoint returns a list of deployments that match the given parameters.
      operationId: getDeployments
      parameters:
        - name: user_address
          in: query
          description: The user’s wallet address in hexadecimal format.
          required: false
          schema:
            type: string
            minLength: 3
        - name: proposal_id
          in: query
          description: The ID of the proposal associated with the deployment.
          required: false
          schema:
            type: integer
        - name: proposal_hash
          in: query
          description: The SHA-256 hash of the proposal.
          required: false
          schema:
            type: string
      responses:
        "200":
          description: A list of deployments matching the specified criteria.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deployments'
        "400":
          description: Bad Request - One or more query parameters are missing or malformed.
        "404":
          description: Not Found - No deployments matched the specified criteria.
        "500":
          description: Internal Server Error - An unexpected error occurred while retrieving deployment information.

    post:
      security:
        - bearerAuth: []
      summary: Create a New Deployment
      description: Creates a new deployment entry in the system. This endpoint is used to initiate the deployment of a project based on the specified user address and proposal ID.
      operationId: createDeployment
      requestBody:
        description: JSON payload containing deployment details, including the user address and proposal ID.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Deployment'
        required: true
      responses:
        "200":
          description: The deployment was successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deployment'
        "400":
          description: Bad Request - The request body is missing required fields or contains invalid data.
        "500":
          description: Internal Server Error - An unexpected error occurred while creating the deployment.

  /deployments/{deployment_id}:
    get:
      security:
        - bearerAuth: []
      summary: Retrieve Deployment by ID
      description: Fetches detailed information about a specific deployment using its unique deployment ID.
      operationId: getDeploymentById
      parameters:
        - in: path
          name: deployment_id
          description: The unique identifier of the deployment to retrieve.
          required: true
          schema:
            type: number
      responses:
        "200":
          description: Detailed deployment information retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deployment'
        "400":
          description: Bad Request - The provided deployment ID is missing or invalid.
        "404":
          description: Not Found - No deployment was found with the specified ID.
        "500":
          description: Internal Server Error - An unexpected error occurred while retrieving the deployment.

  /deployments/worker:
    get:
      summary: Retrieve Worker Deployments by Request ID
      description: Returns deployment information for workers based on the specified request ID. Useful for tracking the status of deployments assigned to a specific worker.
      operationId: getWorkerDeployments
      parameters:
        - name: request_id
          in: query
          description: The unique request ID for the deployment, provided in hexadecimal format.
          required: true
          schema:
            type: string
            minLength: 3
      responses:
        "200":
          description: All deployment details associated with the specified request ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deployment'
        "400":
          description: Bad Request - The `request_id` parameter is missing or invalid.
        "404":
          description: Not Found - No deployments found for the specified request ID.
        "500":
          description: Internal Server Error - An unexpected error occurred while retrieving deployment information.

    post:
      summary: Create a Worker Deployment
      description: Creates a new deployment entry specifically for a worker using the provided request ID and associated details.
      operationId: createWorkerDeployment
      requestBody:
        description: JSON payload containing the worker's deployment details.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        "200":
          description: The worker deployment was successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deployment'
        "400":
          description: Bad Request - The request body is missing required fields or contains invalid data.
        "500":
          description: Internal Server Error - An unexpected error occurred while creating the worker deployment.

  /deployments/worker/status:
    post:
      summary: Update Worker Deployment Status
      description: Updates the status of a worker’s deployment based on the provided request ID. This endpoint is used to track and modify the deployment lifecycle for a specific worker.
      operationId: updateWorkerDeploymentStatus
      requestBody:
        description: JSON payload containing the updated status and associated details for the worker’s deployment.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        "200":
          description: The deployment status was successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deployment'
        "400":
          description: Bad Request - The request body is missing required fields or contains invalid data.
        "404":
          description: Not Found - No deployment was found with the specified ID.
        "500":
          description: Internal Server Error - An unexpected error occurred while updating the deployment status.
  /node/info/da:
    post:
      summary: Store Dynamic Data Availability Information
      description: Submits dynamic data availability (DA) information, such as latency and average cost, to the system. This data is used to monitor and evaluate the performance of the Data Availability node.
      operationId: storeNodeDAInfo
      requestBody:
        description: JSON payload containing DA metrics and the corresponding sender node information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DAInfoResource'
        required: true
      responses:
        "200":
          description: Dynamic data availability information was successfully stored.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        "400":
          description: Bad Request - The request body is missing required fields or contains invalid data.
        "500":
          description: Internal Server Error - An unexpected error occurred while processing the request.

  /info/da:
    get:
      summary: Retrieve Dynamic Data Availability Information
      description: Lists dynamic data availability (DA) information for the specified DA type. Supports filtering by network type.
      operationId: listDynamicDAInfo
      parameters:
        - name: name
          in: query
          description: The name of the Data Availability network. If set to `all`, the response includes information for all DA networks.
          required: true
          schema:
            type: string
            enum:
              - all
              - EigenDA
              - NearDA
              - Celestia
              - Avail
              - Ethereum
              - 0g
        - name: network_type
          in: query
          description: Specify the network type (e.g., Mainnet or Testnet).
          required: true
          schema:
            type: string
            enum:
              - Mainnet
              - Testnet
      responses:
        "200":
          description: A list of dynamic data availability information for the specified DA networks.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDAInfoResponse'
        "400":
          description: Bad Request - One or more query parameters are missing or invalid.
        "404":
          description: Not Found - The specified DA network was not found.
        "500":
          description: Internal Server Error - An unexpected error occurred while retrieving the information.

    post:
      security:
        - ApiKeyAuth: []
      summary: Submit Dynamic Data Availability Information
      description: Creates a new entry for dynamic data availability (DA) information, including metrics such as latency and average cost.
      operationId: createDynamicDAInfo
      requestBody:
        description: JSON payload containing DA metrics and the associated details.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DAInfoResource'
        required: true
      responses:
        "200":
          description: The dynamic DA information was successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        "400":
          description: Bad Request - The request body is missing required fields or contains invalid data.
        "404":
          description: Not Found - The specified DA network was not found.
        "500":
          description: Internal Server Error - An unexpected error occurred while creating the entry.

  /das:
    get:
      summary: Retrieve Static Data Availability Information
      description: Lists static information for Data Availability (DA) networks. This endpoint will be deprecated once the new DA information API is finalized.
      operationId: getStaticDAInfoTemporary
      parameters:
        - name: name
          in: query
          description: The name of the Data Availability network. If set to `all`, the response includes information for all DA networks.
          required: true
          schema:
            type: string
            enum:
              - all
              - EigenDA
              - NearDA
              - Celestia
              - Avail
              - Ethereum
              - 0g
        - name: network_type
          in: query
          description: Specify the network type (e.g., Mainnet or Testnet).
          required: false
          schema:
            type: string
            enum:
              - Mainnet
              - Testnet
      responses:
        "200":
          description: A list of static DA information for the specified networks.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DA'
        "400":
          description: Bad Request - One or more query parameters are missing or invalid.
        "404":
          description: Not Found - The specified DA network was not found.
        "500":
          description: Internal Server Error - An unexpected error occurred while retrieving the information.

  /info/da/static:
    get:
      summary: Retrieve Static Data Availability Information
      description: Fetches static information about Data Availability (DA) networks, such as network type, consensus algorithms, and other configurations.
      operationId: getStaticDAInfo
      parameters:
        - name: name
          in: query
          description: The name of the Data Availability network. If set to `all`, the response includes information for all DA networks.
          required: true
          schema:
            type: string
            enum:
              - all
              - EigenDA
              - NearDA
              - Celestia
              - Avail
              - Ethereum
              - 0g
        - name: network_type
          in: query
          description: Specify the network type (e.g., Mainnet or Testnet).
          required: false
          schema:
            type: string
            enum:
              - Mainnet
              - Testnet
      responses:
        "200":
          description: A list of static DA information for the specified networks.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DA'
        "400":
          description: Bad Request - One or more query parameters are missing or invalid.
        "404":
          description: Not Found - The specified DA network was not found.
        "500":
          description: Internal Server Error - An unexpected error occurred while retrieving the information.
  /info/da/graph:
    get:
      summary: Retrieve Data Availability Graph Information
      description: Returns time-series graph data for one or more Data Availability (DA) networks, including metrics such as latency, average cost, and throughput.
      operationId: getDAGraphInfo
      parameters:
        - name: from_time
          in: query
          description: Start time of the graph in Epoch Timestamp (milliseconds).
          required: true
          schema:
            type: number
            example: 1714194056000
        - name: to_time
          in: query
          description: End time of the graph in Epoch Timestamp (milliseconds).
          required: true
          schema:
            type: number
            example: 1714294056000
        - name: network_type
          in: query
          description: Specify the network type (e.g., Mainnet or Testnet).
          required: true
          schema:
            type: string
            enum:
              - Mainnet
              - Testnet
        - name: da_list
          in: query
          description: A list of DA network names to include in the graph data (e.g., `["NearDA"]`).
          required: true
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
              enum:
                - EigenDA
                - NearDA
                - Celestia
                - Avail
                - Ethereum
                - 0g
                - all
      responses:
        "200":
          description: A list of time-series graph data for the specified DA networks.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GraphDAInfoResponse'
        "400":
          description: Bad Request - One or more query parameters are missing or invalid.
        "404":
          description: Not Found - No data found for the specified time range and networks.
        "500":
          description: Internal Server Error - An unexpected error occurred while retrieving the graph data.

  /proposals/recommendation:
    get:
      security:
        - bearerAuth: []
      summary: Retrieve Recommended Proposals
      description: Returns a list of recommended proposals from solvers based on the specified Service Level Agreement (SLA), cost, throughput, and error rate criteria.
      operationId: getRecommendedProposals
      parameters:
        - name: sla
          in: query
          description: Required uptime of the service in seconds.
          required: true
          schema:
            type: number
            example: 86400
        - name: cost
          in: query
          description: The cost limit for the proposal in USD.
          required: true
          schema:
            type: number
            example: 100
        - name: throughput
          in: query
          description: Required throughput in megabytes per second.
          required: true
          schema:
            type: number
            example: 10
        - name: error_rate
          in: query
          description: Maximum allowable error rate for the proposal.
          required: true
          schema:
            type: number
            example: 0.05
      responses:
        "200":
          description: A list of recommended proposals that match the specified criteria.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SolverProposals'
        "400":
          description: Bad Request - One or more query parameters are missing or invalid.
        "500":
          description: Internal Server Error - An unexpected error occurred while retrieving the proposals.

  /proposals/{proposal_id}:
    get:
      security:
        - bearerAuth: []
      summary: Retrieve Proposal by ID
      description: Fetches detailed information about a specific proposal using its unique proposal ID.
      operationId: getProposalById
      parameters:
        - in: path
          name: proposal_id
          description: The unique identifier of the proposal to retrieve.
          required: true
          schema:
            type: number
      responses:
        "200":
          description: Detailed proposal information retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Proposal'
        "400":
          description: Bad Request - The provided proposal ID is missing or invalid.
        "404":
          description: Not Found - No proposal was found with the specified ID.
        "500":
          description: Internal Server Error - An unexpected error occurred while retrieving the proposal information.

  /proposals/solver:
    post:
      summary: Submit a List of Solver Proposals
      description: Accepts a list of proposals from solvers based on the provided criteria in the request body. These proposals will be evaluated for inclusion in the system.
      operationId: acceptSolverProposals
      requestBody:
        description: JSON payload containing the solver proposal details.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        "200":
          description: Solver proposals were successfully submitted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SolversProposals'
        "400":
          description: Bad Request - The request body is missing required fields or contains invalid data.
        "500":
          description: Internal Server Error - An unexpected error occurred while processing the solver proposals.

    get:
      security:
        - bearerAuth: []
      summary: Retrieve Solver Proposals by Request ID
      description: Fetches solver proposals based on the specified unique request ID, which is generated by the smart contract.
      operationId: getSolverProposalsByRequestId
      parameters:
        - name: request_id
          in: query
          description: The unique request ID returned by the smart contract.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Solver proposals matching the specified request ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SolversProposalsResponse'
        "400":
          description: Bad Request - The provided request ID is missing or malformed.
        "404":
          description: Not Found - No proposals found for the specified request ID.
        "500":
          description: Internal Server Error - An unexpected error occurred while retrieving the solver proposals.
  /proposals:
    post:
      security:
        - bearerAuth: []
      summary: Create a New Proposal
      description: Adds a new proposal to the database. This proposal will be reviewed and evaluated for inclusion in the system.
      operationId: createProposal
      requestBody:
        description: JSON payload containing the proposal details, such as cost, SLA, and associated parameters.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Proposal'
        required: true
      responses:
        "200":
          description: The proposal was successfully created and stored in the database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Proposal'
        "400":
          description: Bad Request - The request body is missing required fields or contains invalid data.
        "404":
          description: Not Found - A related entity required for the proposal was not found.
        "500":
          description: Internal Server Error - An unexpected error occurred while creating the proposal.

  /workers:
    get:
      security:
        - bearerAuth: []
      summary: Retrieve a List of Workers
      description: Returns a list of workers registered in the system. Each worker includes details such as their address, name, and total earned amount.
      operationId: getWorkers
      responses:
        "200":
          description: A list of workers retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workers'
        "400":
          description: Bad Request - The request parameters are missing or malformed.
        "404":
          description: Not Found - No workers were found in the system.
        "500":
          description: Internal Server Error - An unexpected error occurred while retrieving the worker list.

  /workers/{worker_uuid}:
    get:
      security:
        - bearerAuth: []
      summary: Retrieve Worker Information by UUID
      description: Fetches detailed information about a specific worker using their unique UUID. This includes their address, name, reputation, and more.
      operationId: getWorkerByUUID
      parameters:
        - in: path
          name: worker_uuid
          description: The unique identifier (UUID) of the worker to retrieve.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Worker information successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Worker'
        "400":
          description: Bad Request - The provided worker UUID is missing or invalid.
        "404":
          description: Not Found - No worker was found with the specified UUID.
        "500":
          description: Internal Server Error - An unexpected error occurred while retrieving the worker information.

  /solvers/{solver_uuid}:
    get:
      security:
        - bearerAuth: []
      summary: Retrieve Solver Information by UUID
      description: Fetches detailed information about a specific solver using their unique UUID. The response includes the solver’s address, name, reputation, and total staked amount.
      operationId: getSolverByUUID
      parameters:
        - in: path
          name: solver_uuid
          description: The unique identifier (UUID) of the solver to retrieve.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Solver information successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Solver'
        "400":
          description: Bad Request - The provided solver UUID is missing or invalid.
        "404":
          description: Not Found - No solver was found with the specified UUID.
        "500":
          description: Internal Server Error - An unexpected error occurred while retrieving the solver information.
  /whitelist:
    get:
      security:
        - ApiKeyAuth: []
      summary: Retrieve All Whitelisted Wallet Addresses
      description: Returns a list of all wallet addresses that have been whitelisted in the system.
      operationId: getWhitelistedAddresses
      responses:
        "200":
          description: A list of whitelisted wallet addresses retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WhiteLists'
        "400":
          description: Bad Request - The request parameters are missing or invalid.
        "500":
          description: Internal Server Error - An unexpected error occurred while retrieving the whitelist.

    post:
      security:
        - ApiKeyAuth: []
      summary: Add a Wallet Address to the Whitelist
      description: Adds a new wallet address to the whitelist, allowing it to access restricted endpoints.
      operationId: addWhitelistedAddress
      requestBody:
        description: JSON payload containing the wallet address and optional metadata.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/whiteList'
        required: true
      responses:
        "200":
          description: The wallet address was successfully added to the whitelist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/whiteList'
        "400":
          description: Bad Request - The request body is missing required fields or contains invalid data.
        "500":
          description: Internal Server Error - An unexpected error occurred while adding the address to the whitelist.

  /chat:
    get:
      security:
        - bearerAuth: []
      summary: Retrieve Chat History
      description: Returns the chat history for a specific project. This endpoint is used to retrieve messages exchanged between the user and the chat server.
      operationId: getChatHistory
      parameters:
        - name: project_id
          in: query
          description: The unique identifier of the project for which to retrieve chat history.
          required: true
          schema:
            type: string
            minLength: 3
      responses:
        "200":
          description: The chat history was successfully retrieved.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Chat'
        "400":
          description: Bad Request - The provided `project_id` is missing or invalid.
        "500":
          description: Internal Server Error - An unexpected error occurred while retrieving the chat history.

    post:
      security:
        - bearerAuth: []
      summary: Send a Message to the Chat Server
      description: Sends a new message to the chat server and associates it with a specific project.
      operationId: sendChatMessage
      requestBody:
        description: JSON payload containing the message details, including the sender’s address and project ID.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatRequest'
        required: true
      responses:
        "200":
          description: The message was successfully sent to the chat server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
        "400":
          description: Bad Request - The request body is missing required fields or contains invalid data.
        "500":
          description: Internal Server Error - An unexpected error occurred while sending the message.

  /quests:
    get:
      security:
        - bearerAuth: []
        - ApiKeyAuth: []
      summary: Retrieve All Quests
      description: Returns a list of all available quests, including their categories, levels, and associated rewards.
      operationId: getAllQuests
      responses:
        "200":
          description: A list of all quests retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Quests'
        "400":
          description: Bad Request - The request parameters are missing or malformed.
        "500":
          description: Internal Server Error - An unexpected error occurred while retrieving the quests.

    post:
      security:
        - ApiKeyAuth: []
      summary: Create a New Quest
      description: Adds a new quest to the system, including its category, level, and reward details.
      operationId: createQuest
      requestBody:
        description: JSON payload containing the quest details.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Quests'
        required: true
      responses:
        "200":
          description: The quest was successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quests'
        "400":
          description: Bad Request - The request body is missing required fields or contains invalid data.
        "500":
          description: Internal Server Error - An unexpected error occurred while creating the quest.

  /user/quests:
    get:
      security:
        - bearerAuth: []
      summary: Retrieve User Quests
      description: Returns a list of quests completed by a specific user, including their status and associated rewards.
      operationId: getUserQuests
      responses:
        "200":
          description: A list of quests completed by the user retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserQuest'
        "400":
          description: Bad Request - The request parameters are missing or malformed.
        "500":
          description: Internal Server Error - An unexpected error occurred while retrieving the user's quest history.

    post:
      security:
        - ApiKeyAuth: []
      summary: Import Completed Quests for a User
      description: Imports a list of quests that have been completed by the user and updates their quest history accordingly.
      operationId: importUserQuests
      requestBody:
        description: JSON payload containing a list of completed quests.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPostQuests'
        required: true
      responses:
        "200":
          description: The user's completed quests were successfully imported.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        "400":
          description: Bad Request - The request body is missing required fields or contains invalid data.
        "500":
          description: Internal Server Error - An unexpected error occurred while importing the completed quests.
  /quests/weekly:
    get:
      security:
        - bearerAuth: []
      summary: Retrieve Weekly Quests for All Users
      description: Fetches a list of weekly quests that are available to all users. The response includes details about each quest, such as its category, level, and rewards.
      operationId: getWeeklyQuests
      responses:
        "200":
          description: A list of weekly quests successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WeeklyQuests'
        "400":
          description: Bad Request - The request parameters are missing or malformed.
        "500":
          description: Internal Server Error - An unexpected error occurred while retrieving the weekly quests.

  /quests/{quest_id}:
    patch:
      security:
        - ApiKeyAuth: []
      summary: Update Quest Details
      description: Updates the details of an existing quest, such as its category, level, title, or description. Use this endpoint to modify quests that have been created in the system.
      operationId: updateQuestById
      parameters:
        - name: quest_id
          in: path
          description: The unique identifier of the quest to update.
          required: true
          schema:
            type: integer
      requestBody:
        description: JSON payload containing the fields to update for the quest.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Quests'
        required: true
      responses:
        "200":
          description: The quest details were successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quests'
        "400":
          description: Bad Request - The request body is missing required fields or contains invalid data.
        "404":
          description: Not Found - No quest was found with the specified ID.
        "500":
          description: Internal Server Error - An unexpected error occurred while updating the quest details.

  /referral:
    get:
      security:
        - bearerAuth: []
      summary: Retrieve User Referral Information
      description: Returns referral details for the user, including referral codes, creation dates, and whether the codes have been claimed.
      operationId: getUserReferral
      responses:
        "200":
          description: Referral information successfully retrieved.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Referral'
        "400":
          description: Bad Request - The request parameters are missing or malformed.
        "500":
          description: Internal Server Error - An unexpected error occurred while retrieving the referral information.

  /referral/{code}/claim:
    post:
      security:
        - bearerAuth: []
      summary: Claim Referral Code
      description: Claims a referral code, marking it as used and associating it with the user. This action cannot be undone.
      operationId: claimReferralCode
      parameters:
        - name: code
          in: path
          description: The referral code to be claimed.
          required: true
          schema:
            type: string
        - name: is_claimed
          in: query
          description: Indicates whether the referral code has been claimed (`true`) or not (`false`).
          required: false
          schema:
            type: boolean
      responses:
        "200":
          description: The referral code was successfully claimed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
        "400":
          description: Bad Request - The request parameters are missing or malformed.
        "404":
          description: Not Found - The specified referral code does not exist.
        "500":
          description: Internal Server Error - An unexpected error occurred while claiming the referral code.
  /metadata/metrics:
    get:
      summary: Retrieve All Metadata Metrics
      description: Fetches an array of all available metadata metrics. This endpoint supports optional filtering by type to narrow down the results to specific categories.
      operationId: getAllMetadataMetrics
      tags:
        - Metadata
      parameters:
        - name: type
          in: query
          description: Filter the metadata metrics by category. The available types include `da` (Data Availability), `compute`, `storage`, and `indexing`.
          required: false
          schema:
            type: string
            enum:
              - da
              - compute
              - storage
              - indexing
            example: da
      responses:
        "200":
          description: A list of metadata metrics retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MetadataMetric'
        "400":
          description: Bad Request - One or more query parameters are missing or malformed.
        "500":
          description: Internal Server Error - An unexpected error occurred while retrieving the metadata metrics.
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        HTTP Bearer authentication using JSON Web Tokens (JWT). Include the JWT in the `Authorization` header as a bearer token to authenticate API requests.
      
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-Api-Key
      description: |
        API Key authentication. Include your API key in the `X-Api-Key` header for authenticated access to endpoints that require API key authorization.
  schemas:
    LoginRequest:
      type: object
      required:
        - user_address
        - signature
        - siwe_msg
      properties:
        user_address:
          type: string
          description: The user's wallet address in hexadecimal format.
          example: "0x2975b28D83aBE09623e4ceb9522070B8bC10468a"
        signature:
          type: string
          description: The signature generated using the user's private key.
          example: "0x1b2e..."
        siwe_msg:
          type: string
          description: A `Sign-In with Ethereum (SIWE)` formatted message to authenticate the user.
          example: "Sign-In Message: ExampleMessage"

    LoginResponse:
      type: object
      properties:
        user_address:
          type: string
          description: The user's wallet address in hexadecimal format.
          example: "0x2975b28D83aBE09623e4ceb9522070B8bC10468a"
        access_token:
          type: string
          description: A newly generated access token used for Bearer authentication in subsequent API requests.
          example: "eyJhbGciOi..."
        refresh_token:
          type: string
          description: A refresh token, which can be used to obtain new access tokens. It has a longer expiration time compared to the access token.
          example: "dGVzdHJlZnJlc2h..."

    Token:
      type: object
      properties:
        refresh_token:
          type: string
          description: A newly generated refresh token for refreshing the session.
          example: "dGVzdHJlZnJlc2h..."
        access_token:
          type: string
          description: A newly generated access token for Bearer authentication.
          example: "eyJhbGciOi..."

    User:
      type: object
      properties:
        user_address:
          type: string
          description: The user's wallet address in hexadecimal format.
          example: "0x2975b28D83aBE09623e4ceb9522070B8bC10468a"
        total_point:
          type: number
          description: The total number of points earned by the user.
          example: 1500
        quests:
          type: number
          description: The total number of quests completed by the user.
          example: 12
        rank:
          type: number
          description: The user's rank based on their total points and completed quests.
          example: 5
        github:
          type: string
          description: The user's GitHub profile URL, if linked.
          example: "https://github.com/username"
        total_invited:
          type: number
          description: The total number of users invited by this user.
          example: 5
        subscribe:
          type: boolean
          description: Indicates whether the user is subscribed to the service.
          example: true

    Projects:
      type: object
      properties:
        projects:
          type: array
          description: An array of projects associated with the user.
          items:
            $ref: '#/components/schemas/ProjectResource'
        user_address:
          type: string
          description: The user's wallet address in hexadecimal format.
          example: "0x2975b28D83aBE09623e4ceb9522070B8bC10468a"

    ProjectResource:
      allOf:
        - $ref: '#/components/schemas/ProjectUpdate'
        - $ref: '#/components/schemas/ProjectGetResponse'

    ProjectUpdate:
      type: object
      required:
        - id
        - user_address
        - name
      properties:
        id:
          type: string
          description: The unique project identifier generated on-chain.
          example: "b8e77eb1ff0f150c35c0fbab7efd5a1db4ad1bef3b00943e58a6fdf63be0e4d6"
        name:
          type: string
          description: The name of the project.
          example: "My First Rollup Project"
        user_address:
          type: string
          description: The user's wallet address in hexadecimal format.
          example: "0x2975b28D83aBE09623e4ceb9522070B8bC10468a"
        target_performance:
          type: number
          description: The target performance specified for the project.
          example: 95
        status:
          type: string
          description: The current status of the project.
          enum:
            - draft
            - waiting_proposal
            - setting_proposal
            - setting_pay
            - waiting_deployment
            - deploying
            - live
            - terminated
          example: "live"

    ProjectGetResponse:
      type: object
      properties:
        proposed_solver:
          $ref: '#/components/schemas/Solver'
        deployed_workers:
          type: array
          description: An array of worker details if the project involves workers.
          items:
            $ref: '#/components/schemas/Worker'
    Deployment:
      type: object
      required:
        - user_address
        - proposal_id
      properties:
        id:
          type: number
          description: The unique identifier of the deployment.
          example: 123
        request_id:
          type: string
          description: The unique request identifier for the deployment, represented as a hex string.
          example: "b8e77eb1ff0f150c35c0fbab7efd5a1db4ad1bef3b00943e58a6fdf63be0e4d6"
        user_address:
          type: string
          description: The wallet address of the user in hexadecimal format.
          example: "0x2975b28D83aBE09623e4ceb9522070B8bC10468a"
        worker_name:
          type: string
          description: The name of the worker associated with this deployment.
          example: "worker1"
        worker_uuid:
          type: string
          description: The UUID of the worker associated with this deployment.
          example: "6ba7b810-9dad-11d1-80b4-00c04fd430c8"
        proposal_hash:
          type: string
          description: The SHA-256 hash of the proposal.
          example: "e99a18c428cb38d5f260853678922e03"
        proposal_id:
          type: integer
          description: The unique identifier of the proposal associated with this deployment.
          example: 456
        deployment_details:
          type: object
          description: Additional deployment details in JSON format.
        proposal:
          $ref: '#/components/schemas/Proposal'
        Status:
          type: string
          description: The current status of the deployment.
          enum:
            - init
            - pick_up
            - deploying
            - deployed
            - generated_proof
          example: "deployed"

    Solver:
      type: object
      properties:
        address:
          type: string
          description: The hexadecimal address of the solver.
          example: "0x123abc..."
        uuid:
          type: string
          description: The UUID of the solver.
          example: "6ba7b810-9dad-11d1-80b4-00c04fd430c8"
        name:
          type: string
          description: The name of the solver.
          example: "Solver One"
        reputation:
          type: number
          description: The reputation score of the solver, typically used to evaluate its trustworthiness and performance.
          example: 85
        logo_url:
          type: string
          description: The URL of the solver’s logo.
          example: "https://example.com/solver-logo.png"
        total_staked:
          type: number
          description: The total value staked by the solver.
          example: 1000.0

    Worker:
      type: object
      properties:
        address:
          type: string
          description: The hexadecimal address of the worker.
          example: "0x456def..."
        uuid:
          type: string
          description: The UUID of the worker.
          example: "6ba7b810-9dad-11d1-80b4-00c04fd430c8"
        name:
          type: string
          description: The name of the worker.
          example: "Worker Node 1"
        total_earned:
          type: number
          description: The total amount earned by the worker through deployments.
          example: 150.5
        logo_url:
          type: string
          description: The URL of the worker’s logo.
          example: "https://example.com/worker-logo.png"
        total_staked:
          type: number
          description: The total value staked by the worker.
          example: 500.0

    DA:
      type: object
      properties:
        da_name:
          type: string
          description: The name of the Data Availability (DA) network.
          example: "NearDA"
        network_type:
          type: string
          description: The type of network (e.g., Mainnet, Testnet).
          enum:
            - Mainnet
            - Testnet
          example: "Mainnet"
        network:
          type: string
          description: The network name associated with the DA.
          example: "Near Protocol"
        gas_token:
          type: string
          description: The gas token symbol used for transactions in this network.
          example: "NEAR"
        explorer:
          type: string
          description: The URL of the blockchain explorer for this network.
          example: "https://explorer.near.org/"
        launch_date:
          type: string
          description: The official launch date of the DA network in ISO format.
          example: "2023-01-09"
        consensus_algorithm:
          type: string
          description: The consensus algorithm used by the DA network.
          example: "Proof of Stake"
        data_availability_sampling:
          type: boolean
          description: Indicates if the DA network supports data availability sampling.
          example: true

    WhiteLists:
      type: array
      items:
        $ref: '#/components/schemas/whiteList'

    whiteList:
      type: object
      properties:
        address:
          type: string
          description: The wallet address of the user in hexadecimal format.
          example: "0x987abc..."
        name:
          type: string
          description: The name of the Data Availability network or entity associated with this whitelisted address.
          example: "EigenDA"
        network_type:
          type: string
          description: The type of network (e.g., Mainnet, Testnet).
          enum:
            - Mainnet
            - Testnet
          example: "Testnet"
        created_at:
          type: string
          description: The date and time when the address was added to the whitelist.
          example: "2023-12-01T10:15:30Z"

    MetadataMetric:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: The unique identifier of the metadata metric.
          example: 1
        category:
          type: string
          description: The category of the metadata (e.g., public_info, verified).
          enum:
            - public_info
            - unverified
            - verified
          example: "verified"
        show_in_chart:
          type: boolean
          description: Indicates if the metric should be displayed in a chart visualization.
          example: true
        show_in_table:
          type: boolean
          description: Indicates if the metric should be displayed in a table format.
          example: false
        field_name:
          type: string
          description: The field name in the API response corresponding to this metric.
          example: "availability_score"
        display_name:
          type: string
          description: The display name shown on the dashboard for this metric.
          example: "Availability Score"
        description:
          type: string
          description: A brief description of the metric, shown as a tooltip.
          example: "Indicates the percentage of availability for the DA."
        unit_in_name:
          type: string
          description: The unit of the metric, displayed alongside the display name.
          example: "%"
        unit_in_value:
          type: string
          description: The unit of the metric value, appended directly to the value.
          example: "%"
        value_type:
          type: string
          description: The data type of the metric value (e.g., string, int, float).
          enum:
            - string
            - int
            - float
            - bool
          example: "float"
    Proposal:
      type: object
      properties:
        init_cost:
          type: number
          description: The initial cost required to deploy this proposal, specified in USD.
          example: 100.0
        maintenance_cost:
          type: number
          description: The recurring maintenance cost of this proposal, specified in USD.
          example: 50.0
        pay_period:
          type: number
          description: The payment period duration in seconds.
          example: 2592000  # One month in seconds
        accept_currency:
          type: string
          description: The currency accepted for payments in this proposal (e.g., USD, ETH).
          example: "USD"
        cost:
          type: number
          description: The total cost of the proposal, specified in USD.
          example: 150.0
        fit:
          type: number
          description: A score indicating the suitability or "fit" of this proposal for the requested specifications.
          example: 90
        throughput:
          type: number
          description: The maximum throughput of the proposal, specified in megabytes per second.
          example: 100
        sla:
          type: number
          description: The required uptime for the service in seconds.
          example: 86400
        error_rate:
          type: number
          description: The error rate threshold for this proposal.
          example: 0.01
        rank:
          type: number
          description: The ranking of this proposal compared to others.
          example: 1
        extra_attribute:
          type: object
          description: Any additional attributes or setup details related to the proposal.
          example:
            location: "US-West"
            setup_time: "2 hours"

    DAInfoResource:
      allOf:
        - $ref: '#/components/schemas/HistoryData'
        - $ref: '#/components/schemas/DASpecificInfo'
        - $ref: '#/components/schemas/DA'

    DASpecificInfo:
      type: object
      properties:
        state:
          $ref: '#/components/schemas/State'
        geo_coverage:
          type: number
          description: Indicates the geographical coverage area of the DA network.
          example: 5  # Number of regions covered
        grants_available:
          type: boolean
          description: Indicates if grants are available for developers using this DA network.
          example: true
        number_of_projects:
          type: integer
          description: The total number of active projects on this DA network.
          example: 15
        node_info:
          type: object
          description: Detailed information about the nodes in the network.
          properties:
            total_nodes:
              type: integer
              description: The total number of nodes in the network.
              example: 25
            active_nodes:
              type: integer
              description: The number of nodes currently active.
              example: 20

    GraphDAInfoResponse:
      type: object
      properties:
        data:
          type: array
          description: An array of DA graph history data objects, providing time-series data for the specified metrics.
          items:
            $ref: '#/components/schemas/DAHistoryData'
        network_type:
          type: string
          description: The type of network, such as Mainnet or Testnet.
          example: "Mainnet"

    DAHistoryData:
      type: object
      properties:
        da_name:
          type: string
          description: The name of the DA network.
          example: "NearDA"
        history_data:
          type: array
          description: Time-series data for the DA network's metrics.
          items:
            $ref: '#/components/schemas/HistoryData'

    HistoryData:
      type: object
      properties:
        sender_name:
          type: string
          description: The identity of the sender node.
          example: "Node-1"
        sender_address:
          type: string
          description: The blockchain address of the sender node in hexadecimal format.
          example: "0x123456..."
        avg_cost:
          type: number
          description: The average cost of transactions, in USD.
          example: 3.5
        block_time:
          type: number
          description: The average time to produce a new block, in seconds.
          example: 15.0
        created_at:
          type: string
          description: The timestamp indicating when the data was collected.
          example: "2024-04-26T12:56:41.240582Z"
        finality_time:
          type: number
          description: The average time for block finality, in seconds.
          example: 24.0
        latency:
          type: number
          description: The latency in seconds.
          example: 0.35
        max_throughput:
          type: number
          description: The maximum throughput in megabytes per second.
          example: 12.5
        uptime:
          type: number
          description: The percentage of time the service is available.
          example: 99.9
        total_transactions:
          type: integer
          description: The total number of transactions processed by the network.
          example: 500000
        total_blocks:
          type: integer
          description: The total number of blocks produced by the network.
          example: 12000
        total_fee:
          type: number
          description: The total gas fee incurred, specified in native units.
          example: 350.0
        total_fee_usd:
          type: number
          description: The total gas fee incurred, converted to USD.
          example: 20.0
        total_staked:
          type: number
          description: The total amount staked in the network.
          example: 1500.0
        total_staked_usd:
          type: number
          description: The total value staked in USD.
          example: 750.0
        number_of_nodes:
          type: integer
          description: The total number of nodes in the network.
          example: 50
        throughput:
          type: number
          description: The current throughput in megabytes per second.
          example: 10.0
        node_reliability:
          type: number
          description: The reliability score of the nodes.
          example: 95
        cost_per_transaction:
          type: number
          description: The average cost per transaction, in USD.
          example: 0.01
        gas_per_transaction:
          type: number
          description: The amount of gas used per transaction.
          example: 21000
        cost_per_block:
          type: number
          description: The average cost per block, in USD.
          example: 0.5
        gas_per_block:
          type: number
          description: The amount of gas used per block.
          example: 100000
        cost_per_mb:
          type: number
          description: The cost per megabyte, in USD.
          example: 0.05
        gas_per_mb:
          type: number
          description: The amount of gas used per megabyte.
          example: 5000
        total_value_locked:
          type: number
          description: The total value locked in the network, in USD.
          example: 10000.0
        send_blob_latency:
          type: number
          description: The latency for sending one blob to the network.
          example: 0.8
        total_data_transacted:
          type: number
          description: The total amount of data transacted, in megabytes.
          example: 25000.0

    Referral:
      type: object
      properties:
        id:
          type: integer
          description: The unique identifier of the referral.
          example: 101
        referrer_address:
          type: string
          description: The wallet address of the user who created the referral code.
          example: "0x123abc..."
        referred_address:
          type: string
          description: The wallet address of the user who claimed the referral code.
          example: "0x456def..."
        code:
          type: string
          description: The referral code.
          example: "REF12345"
        activity_action:
          type: string
          description: The action associated with the referral (e.g., login, registration).
          example: "login"
        claimed:
          type: boolean
          description: Indicates whether the referral code has been claimed.
          example: true
        claimed_at:
          type: string
          description: The timestamp when the referral was claimed.
          example: "2024-04-26T12:56:41.240582Z"
        active:
          type: boolean
          description: Indicates whether the referral code is currently active.
          example: true
        created_at:
          type: string
          description: The timestamp when the referral was created.
          example: "2024-01-15T09:30:00Z"
    SolverProposals:
      type: object
      description: Represents a list of solver proposals, each providing a solution to a specific request.
      properties:
        solver_proposals:
          type: array
          description: An array of solver proposal details.
          items:
            $ref: '#/components/schemas/SolverProposal'

    SolverProposal:
      type: object
      description: Contains the details of a proposal offered by a solver, including attributes for evaluating its fit, rank, and associated costs.
      properties:
        proposals:
          type: array
          description: An array of individual proposals submitted by the solver.
          items:
            $ref: '#/components/schemas/Proposal'
        solver_uuid:
          type: string
          description: The unique identifier (UUID) of the solver submitting the proposals.
          example: "6ba7b810-9dad-11d1-80b4-00c04fd430c8"
        solver_reputation:
          type: number
          description: The reputation score of the solver, indicating its trustworthiness and performance.
          example: 90

    SolversProposalsResponse:
      type: object
      properties:
        proposals:
          type: array
          description: An array of proposals returned by solvers in response to a request.
          items:
            $ref: '#/components/schemas/SolversProposal'
        request_id:
          type: string
          description: The unique identifier of the proposal request generated by the smart contract.
          example: "b8e77eb1ff0f150c35c0fbab7efd5a1db4ad1bef3b00943e58a6fdf63be0e4d6"

    SolversProposals:
      type: object
      properties:
        proposals:
          type: array
          description: An array of proposals submitted by various solvers.
          items:
            $ref: '#/components/schemas/SolversProposal'
        solver_address:
          type: string
          description: The wallet address of the solver in hexadecimal format.
          example: "0x123456..."
        solver_reputation:
          type: number
          description: The reputation score of the solver.
          example: 85
        request_id:
          type: string
          description: The unique request identifier for the solver's proposals.
          example: "e99a18c428cb38d5f260853678922e03"

    SolversProposal:
      type: object
      properties:
        request_id:
          type: string
          description: The unique identifier for the proposal request.
          example: "b8e77eb1ff0f150c35c0fbab7efd5a1db4ad1bef3b00943e58a6fdf63be0e4d6"
        solver_address:
          type: string
          description: The address of the solver submitting the proposal.
          example: "0x123456..."
        solver_reputation:
          type: number
          description: The reputation score of the solver.
          example: 90
        fit:
          type: number
          description: The fit score of the solver's proposal, indicating how well it meets the request's requirements.
          example: 85
        rank:
          type: number
          description: The ranking of the proposal among other submissions.
          example: 1
        da:
          $ref: '#/components/schemas/DAProposal'
        indexing:
          $ref: '#/components/schemas/IndexingProposal'
        compute:
          $ref: '#/components/schemas/ComputeProposal'
        storage:
          $ref: '#/components/schemas/StorageProposal'

    DAProposal:
      type: object
      description: Represents a proposal for a Data Availability (DA) solution.
      properties:
        init_cost:
          type: number
          description: The initial deployment cost for the DA solution, specified in USD.
          example: 120.0
        maintenance_cost:
          type: number
          description: The recurring maintenance cost of the DA solution, specified in USD.
          example: 30.0
        accept_currency:
          type: string
          description: The currency accepted for payments in this DA proposal.
          example: "USD"
        throughput:
          type: number
          description: The maximum throughput capacity, specified in megabytes per second.
          example: 120.0
        sla:
          type: number
          description: The required service-level agreement (SLA) uptime, specified in seconds.
          example: 86400
        rank:
          type: number
          description: The ranking of the DA proposal.
          example: 1
        error_rate:
          type: number
          description: The acceptable error rate threshold for the proposal.
          example: 0.05

    IndexingProposal:
      type: object
      properties:
        rank:
          type: number
          description: The ranking of the indexing proposal.
          example: 2
        fit:
          type: number
          description: The fit score of the indexing proposal, indicating how well it meets the request's specifications.
          example: 90

    StorageProposal:
      type: object
      properties:
        rank:
          type: number
          description: The ranking of the storage proposal.
          example: 3
        fit:
          type: number
          description: The fit score of the storage proposal.
          example: 85

    ComputeProposal:
      type: object
      properties:
        rank:
          type: number
          description: The ranking of the compute proposal.
          example: 1
        fit:
          type: number
          description: The fit score of the compute proposal.
          example: 95
    Scores:
      type: array
      description: An array of scores associated with different users.
      items:
        $ref: '#/components/schemas/Score'

    Score:
      type: object
      properties:
        user_address:
          type: string
          description: The user’s wallet address in hexadecimal format.
          example: "0x2975b28D83aBE09623e4ceb9522070B8bC10468a"
        total_point:
          type: number
          description: The total number of points awarded to the user.
          example: 3500
        rank:
          type: number
          description: The user's rank based on their points in comparison to other users.
          example: 1


   

    
    CommonResponse:
      type: object
      properties:
        message:
          type: string
          description: A human-readable message describing the result of the operation.
          example: "Operation completed successfully."
        status:
          type: string
          description: The status of the operation (e.g., success, error).
          example: "success"
